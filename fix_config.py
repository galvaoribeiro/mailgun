#!/usr/bin/env python3
"""
Script para corrigir as configura√ß√µes do Mailgun
"""

import os
from config import Config

def fix_config():
    """Corrige as configura√ß√µes do Mailgun"""
    print("üîß Corrigindo configura√ß√µes do Mailgun...")
    print("=" * 50)
    
    # Verifica se as vari√°veis de ambiente est√£o configuradas
    api_key = os.environ.get('MAILGUN_API_KEY')
    domain = os.environ.get('MAILGUN_DOMAIN')
    
    print(f"API Key configurada: {'‚úÖ' if api_key else '‚ùå'}")
    print(f"Dom√≠nio configurado: {domain or '‚ùå N√£o configurado'}")
    
    if not api_key:
        print("\n‚ùå MAILGUN_API_KEY n√£o est√° configurada!")
        print("Para configurar, execute no PowerShell:")
        print("$env:MAILGUN_API_KEY='sua_api_key_aqui'")
        print("$env:MAILGUN_DOMAIN='seu_dominio.mailgun.org'")
        return False
    
    if not domain:
        print("\n‚ùå MAILGUN_DOMAIN n√£o est√° configurado!")
        print("Para configurar, execute no PowerShell:")
        print("$env:MAILGUN_DOMAIN='seu_dominio.mailgun.org'")
        return False
    
    # Testa a conex√£o com o dom√≠nio configurado
    print(f"\nüåê Testando dom√≠nio: {domain}")
    
    import requests
    from requests.auth import HTTPBasicAuth
    
    base_url = f'https://api.mailgun.net/v3/{domain}'
    
    try:
        response = requests.get(
            f'{base_url}/domains',
            auth=HTTPBasicAuth('api', api_key)
        )
        
        if response.status_code == 200:
            print("‚úÖ Dom√≠nio configurado corretamente!")
            return True
        else:
            print(f"‚ùå Erro com dom√≠nio {domain}: {response.status_code}")
            print(f"Resposta: {response.text}")
            
            # Sugere usar dom√≠nio sandbox
            print("\nüí° Sugest√£o: Use um dom√≠nio sandbox do Mailgun para testes")
            print("Exemplo: sandbox123456789.mailgun.org")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar dom√≠nio: {e}")
        return False

def create_env_file():
    """Cria um arquivo .env de exemplo"""
    print("\nüìù Criando arquivo .env de exemplo...")
    
    env_content = """# Configura√ß√µes do Mailgun
# IMPORTANTE: Substitua pelos seus valores reais
MAILGUN_API_KEY=sua_api_key_aqui
MAILGUN_DOMAIN=seu_dominio.mailgun.org

# Configura√ß√µes da aplica√ß√£o
PORT=5000
DEBUG=True

# Configura√ß√µes de envio
BATCH_SIZE=1000
DELAY_BETWEEN_BATCHES=60
MAX_EMAILS_PER_DAY=10000
"""
    
    try:
        with open('.env.example', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env.example criado!")
        print("üìã Copie este arquivo para .env e configure suas credenciais")
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivo: {e}")

def main():
    """Executa a corre√ß√£o de configura√ß√µes"""
    print("üöÄ Corre√ß√£o de Configura√ß√µes do Mailgun")
    print("=" * 50)
    
    if fix_config():
        print("\n‚úÖ Configura√ß√µes est√£o corretas!")
    else:
        print("\n‚ùå Configura√ß√µes precisam ser corrigidas")
        create_env_file()
        
        print("\nüìã Pr√≥ximos passos:")
        print("1. Obtenha sua API Key do Mailgun")
        print("2. Configure um dom√≠nio v√°lido no Mailgun")
        print("3. Crie um arquivo .env com suas credenciais")
        print("4. Execute novamente o teste")

if __name__ == "__main__":
    main()
